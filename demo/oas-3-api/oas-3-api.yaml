openapi: '3.0.2'
info:
  title: Servers demo API
  version: '1.0'
  description: Test API for testing AMF service
  termsOfService: http://example.com/terms/
  contact:
    name: API Support
    url: http://www.example.com/support
    email: support@example.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: https://development.gigantic-server.com/v1
    description: Development server
  - url: https://staging.gigantic-server.com/v1
    description: Staging server
  - url: https://api.gigantic-server.com/v1
    description: Production server
  - url: https://{username}.gigantic-server.com:{port}/{basePath}
    description: The production API server
    variables:
      username:
        default: demo
        description: this value is assigned by the service provider, in this example `gigantic-server.com`
      port:
        enum:
          - '8443'
          - '443'
        default: '8443'
      basePath:
        default: v2

externalDocs:
  description: ABout this API.
  url: https://domain.com

components:
  schemas:
    GeneralError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Article:
      description: Representation of an article with title and body in CommonMark format.
      type: object
      properties:
        id:
          type: string
          description: The unique ID of this article, generated by the API implementation upon creation of the article.
          readOnly: true
        title:
          description: The title of the article, in CommonMark format.
          type: string
          minLength: 3
      externalDocs:
        description: Find more about this type
        url: https://api.com
  parameters:
    skipParam:
      name: skip
      in: query
      description: number of items to skip
      required: true
      schema:
        type: integer
        format: int32
    limitParam:
      name: limit
      in: query
      description: max records to return
      required: true
      schema:
        type: integer
        format: int32
  responses:
    NotFound:
      description: Entity not found.
    IllegalInput:
      description: Illegal input for operation.
    GeneralError:
      description: General Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
    petstore_auth:
      type: oauth2
      flows: 
        implicit:
          authorizationUrl: http://example.org/api/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets

paths:
  /pets:
    get:
      description: Returns all pets from the system that the user has access to
      summary: Find all pets
      operationId: listPets
      tags:
        - pet
      security:
        - petstore_auth:
          - write:pets
          - read:pets
      responses:
        '200':
          description: A list of pets.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
  /default:
    description: A default path to the API
    get:
      summary: "A get method"
      responses:
        '200':
          description: Successful response
    post:
      summary: Add something
      requestBody:
        content:  # Response body
          application/json:  # Media type
            schema:
              $ref: "#/components/schemas/Article"
      responses:
        '201':
          description: Successful creation
          content:
            appliication/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Article"
                  - type: object
                    properties:
                      description:
                        type: string
